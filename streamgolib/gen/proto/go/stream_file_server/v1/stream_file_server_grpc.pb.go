// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: stream_file_server/v1/stream_file_server.proto

package stream_file_serverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamFileServiceClient is the client API for StreamFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamFileServiceClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	UploadStream(ctx context.Context, opts ...grpc.CallOption) (StreamFileService_UploadStreamClient, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
}

type streamFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamFileServiceClient(cc grpc.ClientConnInterface) StreamFileServiceClient {
	return &streamFileServiceClient{cc}
}

func (c *streamFileServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/stream_file_server.v1.StreamFileService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamFileServiceClient) UploadStream(ctx context.Context, opts ...grpc.CallOption) (StreamFileService_UploadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamFileService_ServiceDesc.Streams[0], "/stream_file_server.v1.StreamFileService/UploadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamFileServiceUploadStreamClient{stream}
	return x, nil
}

type StreamFileService_UploadStreamClient interface {
	Send(*UploadStreamRequest) error
	CloseAndRecv() (*UploadStreamResponse, error)
	grpc.ClientStream
}

type streamFileServiceUploadStreamClient struct {
	grpc.ClientStream
}

func (x *streamFileServiceUploadStreamClient) Send(m *UploadStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamFileServiceUploadStreamClient) CloseAndRecv() (*UploadStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamFileServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, "/stream_file_server.v1.StreamFileService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamFileServiceServer is the server API for StreamFileService service.
// All implementations should embed UnimplementedStreamFileServiceServer
// for forward compatibility
type StreamFileServiceServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	UploadStream(StreamFileService_UploadStreamServer) error
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
}

// UnimplementedStreamFileServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamFileServiceServer struct {
}

func (UnimplementedStreamFileServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedStreamFileServiceServer) UploadStream(StreamFileService_UploadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadStream not implemented")
}
func (UnimplementedStreamFileServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

// UnsafeStreamFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamFileServiceServer will
// result in compilation errors.
type UnsafeStreamFileServiceServer interface {
	mustEmbedUnimplementedStreamFileServiceServer()
}

func RegisterStreamFileServiceServer(s grpc.ServiceRegistrar, srv StreamFileServiceServer) {
	s.RegisterService(&StreamFileService_ServiceDesc, srv)
}

func _StreamFileService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamFileServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream_file_server.v1.StreamFileService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamFileServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamFileService_UploadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamFileServiceServer).UploadStream(&streamFileServiceUploadStreamServer{stream})
}

type StreamFileService_UploadStreamServer interface {
	SendAndClose(*UploadStreamResponse) error
	Recv() (*UploadStreamRequest, error)
	grpc.ServerStream
}

type streamFileServiceUploadStreamServer struct {
	grpc.ServerStream
}

func (x *streamFileServiceUploadStreamServer) SendAndClose(m *UploadStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamFileServiceUploadStreamServer) Recv() (*UploadStreamRequest, error) {
	m := new(UploadStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamFileService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamFileServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream_file_server.v1.StreamFileService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamFileServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamFileService_ServiceDesc is the grpc.ServiceDesc for StreamFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream_file_server.v1.StreamFileService",
	HandlerType: (*StreamFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _StreamFileService_Echo_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _StreamFileService_UploadFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadStream",
			Handler:       _StreamFileService_UploadStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stream_file_server/v1/stream_file_server.proto",
}
