// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: py_vad/v1/py_vad.proto

package py_vadv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PyVadServiceClient is the client API for PyVadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PyVadServiceClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	CheckVad(ctx context.Context, in *CheckVadRequest, opts ...grpc.CallOption) (*CheckVadResponse, error)
}

type pyVadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPyVadServiceClient(cc grpc.ClientConnInterface) PyVadServiceClient {
	return &pyVadServiceClient{cc}
}

func (c *pyVadServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/py_vad.v1.PyVadService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVadServiceClient) CheckVad(ctx context.Context, in *CheckVadRequest, opts ...grpc.CallOption) (*CheckVadResponse, error) {
	out := new(CheckVadResponse)
	err := c.cc.Invoke(ctx, "/py_vad.v1.PyVadService/CheckVad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PyVadServiceServer is the server API for PyVadService service.
// All implementations should embed UnimplementedPyVadServiceServer
// for forward compatibility
type PyVadServiceServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	CheckVad(context.Context, *CheckVadRequest) (*CheckVadResponse, error)
}

// UnimplementedPyVadServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPyVadServiceServer struct {
}

func (UnimplementedPyVadServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedPyVadServiceServer) CheckVad(context.Context, *CheckVadRequest) (*CheckVadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVad not implemented")
}

// UnsafePyVadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PyVadServiceServer will
// result in compilation errors.
type UnsafePyVadServiceServer interface {
	mustEmbedUnimplementedPyVadServiceServer()
}

func RegisterPyVadServiceServer(s grpc.ServiceRegistrar, srv PyVadServiceServer) {
	s.RegisterService(&PyVadService_ServiceDesc, srv)
}

func _PyVadService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVadServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/py_vad.v1.PyVadService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVadServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVadService_CheckVad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVadServiceServer).CheckVad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/py_vad.v1.PyVadService/CheckVad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVadServiceServer).CheckVad(ctx, req.(*CheckVadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PyVadService_ServiceDesc is the grpc.ServiceDesc for PyVadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PyVadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "py_vad.v1.PyVadService",
	HandlerType: (*PyVadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _PyVadService_Echo_Handler,
		},
		{
			MethodName: "CheckVad",
			Handler:    _PyVadService_CheckVad_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "py_vad/v1/py_vad.proto",
}
